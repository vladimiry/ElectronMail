diff --git a/packages/shared/lib/helpers/desktop.ts b/packages/shared/lib/helpers/desktop.ts
index 23850e082c..e96178c368 100644
--- a/packages/shared/lib/helpers/desktop.ts
+++ b/packages/shared/lib/helpers/desktop.ts
@@ -1,15 +1,14 @@
-import UAParser from 'ua-parser-js';
-
 import type { APP_NAMES } from '../constants';
 import { APPS } from '../constants';
-import { isLinux, isMac, isWindows } from './browser';
-
-const uaParser = new UAParser();
-const ua = uaParser.getResult();
+import {
+  isLinux,
+  isMac,
+  isWindows,
+} from './browser';

 export const SUPPORTED_ELECTRON_APP: APP_NAMES[] = [APPS.PROTONACCOUNT, APPS.PROTONCALENDAR, APPS.PROTONMAIL];

-export const isElectronApp = /electron/i.test(ua.ua);
+export const isElectronApp = false;
 export const isElectronOnMac = isElectronApp && isMac();
 export const isElectronOnWindows = isElectronApp && isWindows();
 export const isElectronOnLinux = isElectronApp && isLinux();
@@ -24,12 +23,11 @@ export const isElectronOnInboxApps = (app: APP_NAMES) => {

 /* Electron apps built with Electron Forge will inject the `productName` and
  * `version` properties of the app's package.json in the user-agent. */
-export const isElectronMail = isElectronApp && /ProtonMail/i.test(ua.ua);
-export const isElectronPass = isElectronApp && /ProtonPass/i.test(ua.ua);
+export const isElectronMail = isElectronApp;
+export const isElectronPass = isElectronApp;

 /*
  * The version of the application is injected in the user-agent by Electron Forge.
  * This method works if the version uses the following format: `x.y.z`.
  */
-export const electronAppVersion = ua.ua.match(/((ProtonMail|ProtonPass)\/)(?<version>([0-9][.]).{3})/i)?.groups
-    ?.version;
+export const electronAppVersion = undefined;

diff --git a/packages/pack/scripts/validate.sh b/packages/pack/scripts/validate.sh
index 1a2ea64..bae388c 100755
--- a/packages/pack/scripts/validate.sh
+++ b/packages/pack/scripts/validate.sh
@@ -58,7 +58,7 @@ function main {
   fi;

   if [ "$hasSourceMap" -eq 0 ]; then
-    hasError=true;
+    #hasError=true;
     echo "[error] no SourceMaps found inside the directory: $OUTPUT_DIR";
   fi;

diff --git a/packages/pack/bin/protonPack.js b/packages/pack/bin/protonPack.js
index 55715b89d..c87879ad4 100755
--- a/packages/pack/bin/protonPack.js
+++ b/packages/pack/bin/protonPack.js
@@ -81,7 +81,7 @@ addGlobalOptions(program.command('build').description('create an optimized produ
         const outputPath = path.resolve('./dist');
         await commandWithLog(`rm -rf ${outputPath}`);
         await commandWithLog(
-            `${require.resolve('webpack-cli/bin/cli.js')} --progress --output-path=${outputPath} ${webpackArgs}`,
+            `${require.resolve('webpack-cli/bin/cli.js')} --output-path=${outputPath} ${webpackArgs}`,
             {
                 stdio: 'inherit',
             }

diff --git a/packages/pack/webpack/entries.ts b/packages/pack/webpack/entries.ts
index 30db3c5c9f..0a8a32dfba 100644
--- a/packages/pack/webpack/entries.ts
+++ b/packages/pack/webpack/entries.ts
@@ -27,25 +27,15 @@ export const mergeEntry = (originalEntry: any, entry: any) => {
     };
 };

-export const addDevEntry = (config: any) => {
-    if (config.mode === 'production') {
-        return;
-    }
+export const addLoginEntry = (config: any) => {
     // @ts-ignore
-    config.entry.dev = [require.resolve('@proton/components/containers/app/StandaloneApp.tsx')];
+    config.entry.login = [require.resolve('@proton/components/containers/app/StandaloneApp.tsx')];
     config.plugins.push(
         new HtmlWebpackPlugin({
             filename: 'login.html',
             templateContent: `<html><body><div class="app-root"></div></body></html>`,
-            chunks: ['dev'],
+            chunks: ['login'],
             inject: 'body',
         })
     );
-    // @ts-ignore
-    config.devServer.historyApiFallback.rewrites = config.devServer.historyApiFallback.rewrites || [];
-    // @ts-ignore
-    config.devServer.historyApiFallback.rewrites.push({
-        from: '/login',
-        to: '/login.html',
-    });
 };

diff --git a/packages/shared/lib/helpers/browser.ts b/packages/shared/lib/helpers/browser.ts
index 9aaa78a28..f3d24b47c 100644
--- a/packages/shared/lib/helpers/browser.ts
+++ b/packages/shared/lib/helpers/browser.ts
@@ -1,6 +1,21 @@
 import UAParser from 'ua-parser-js';

 const uaParser = new UAParser();
+{
+    const platform = String(navigator.platform);
+    const userAgents = {
+        linux: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36",
+        windows: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36",
+        macos: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
+    } as const;
+    uaParser.setUA(
+        platform.startsWith("Linux")
+            ? userAgents.linux
+            : platform.startsWith("Win")
+                ? userAgents.windows
+                : userAgents.macos
+    );
+}
 const ua = uaParser.getResult();

 export const hasModulesSupport = () => {
@@ -89,20 +104,10 @@ export const requireDirectAction = () => isSafari() || isFirefox() || isEdge();
  * @links { https://mathiasbynens.github.io/rel-noopener/}
  */
 export const openNewTab = (url: string) => {
-    if (isIE11()) {
-        const otherWindow = window.open();
-        if (!otherWindow) {
-            return;
-        }
-        otherWindow.opener = null;
-        otherWindow.location.href = url;
-        return;
-    }
-    const anchor = document.createElement('a');
-
-    anchor.setAttribute('rel', 'noreferrer nofollow noopener');
-    anchor.setAttribute('target', '_blank');
-    anchor.href = url;
-
-    return anchor.click();
+    window.dispatchEvent(
+        new CustomEvent(
+            "electron-mail:packages/shared/lib/helpers/browser.ts:openNewTab",
+            {detail: {url}},
+        ),
+    );
 };

diff --git a/packages/components/components/link/SettingsLink.tsx b/packages/components/components/link/SettingsLink.tsx
index 5081c4003..cde37c0cb 100644
--- a/packages/components/components/link/SettingsLink.tsx
+++ b/packages/components/components/link/SettingsLink.tsx
@@ -48,7 +48,7 @@ const SettingsLink = ({ path, app, children, ...rest }: Props, ref: Ref<HTMLAnch
             ref={ref}
             toApp={APPS.PROTONACCOUNT}
             // If going to settings for the same app
-            target={canOpenInSameTab(APP_NAME, settingsApp, toSettingsForApp) ? '_self' : '_blank'}
+            target={canOpenInSameTab(APP_NAME, settingsApp, toSettingsForApp) || app === APPS.PROTONVPN_SETTINGS ? '_self' : '_blank'}
             {...rest}
         >
             {children}

diff --git a/packages/components/helpers/earlyAccessDesynchronization.ts b/packages/components/helpers/earlyAccessDesynchronization.ts
index 36bd0c712..c2fb3681c 100644
--- a/packages/components/helpers/earlyAccessDesynchronization.ts
+++ b/packages/components/helpers/earlyAccessDesynchronization.ts
@@ -42,6 +42,7 @@ export const handleEarlyAccessDesynchronization = ({
     earlyAccessScope: Feature<Environment> | undefined;
     appName: APP_NAMES;
 }) => {
+    return;
     if (doesNotSupportEarlyAccessVersion()) {
         return;
     }

diff --git a/applications/mail/src/app/components/list/banners/auto-delete/variations/AutoDeleteFreeBanner.tsx b/applications/mail/src/app/components/list/banners/auto-delete/variations/AutoDeleteFreeBanner.tsx
index 24c56ef6fe..a6046b391c 100644
--- a/applications/mail/src/app/components/list/banners/auto-delete/variations/AutoDeleteFreeBanner.tsx
+++ b/applications/mail/src/app/components/list/banners/auto-delete/variations/AutoDeleteFreeBanner.tsx
@@ -7,6 +7,10 @@ import { AutoDeleteUpsellModal, useModalState } from '@proton/components/compone
 import { PromotionBanner } from '@proton/components/containers';

 const AutoDeleteFreeBanner = () => {
+    if (___ELECTRON_MAIL_PROTON_SUPPRESS_UPSELL_ADS_PLACEHOLDER___) {
+        return null;
+    }
+
     const [upsellModalProps, toggleUpsellModal, renderUpsellModal] = useModalState();

     return (

diff --git a/applications/mail/src/app/hooks/useShowUpsellBanner.ts b/applications/mail/src/app/hooks/useShowUpsellBanner.ts
index b82b7ae976..0907c85ec6 100644
--- a/applications/mail/src/app/hooks/useShowUpsellBanner.ts
+++ b/applications/mail/src/app/hooks/useShowUpsellBanner.ts
@@ -33,12 +33,14 @@ const useShowUpsellBanner = (labelID: string) => {
     - No other banner is shown in the message list
     - If a value is found in the localStorage that should trigger a new display
      */
+    /* <electron-mail-mark> */
     const canDisplayUpsellBanner =
         user.isFree &&
         Date.now() > threeDaysAfterCreationDate &&
         isInbox &&
         needToShowUpsellBanner.current &&
         showAgain;
+    /* </electron-mail-mark> */

     const handleDismissBanner = () => {
         // Set the ref to false so that we hide the banner and update the localStorage value
@@ -71,6 +73,10 @@ const useShowUpsellBanner = (labelID: string) => {
         }
     }, []);

+    if (___ELECTRON_MAIL_PROTON_SUPPRESS_UPSELL_ADS_PLACEHOLDER___) {
+        return { canDisplayUpsellBanner: false, needToShowUpsellBanner, handleDismissBanner };
+    }
+
     return { canDisplayUpsellBanner, needToShowUpsellBanner, handleDismissBanner };
 };

diff --git a/packages/components/containers/heading/PrivateHeader.tsx b/packages/components/containers/heading/PrivateHeader.tsx
index f7678c871b..fcaee27280 100644
--- a/packages/components/containers/heading/PrivateHeader.tsx
+++ b/packages/components/containers/heading/PrivateHeader.tsx
@@ -58,7 +58,10 @@ const PrivateHeader = ({

             <TopNavbar>
                 <TopNavbarList>
-                    {upsellButton !== undefined ? upsellButton : !hideUpsellButton && <TopNavbarUpsell app={app} />}
+                    {___ELECTRON_MAIL_PROTON_SUPPRESS_UPSELL_ADS_PLACEHOLDER___
+                        ? null
+                        : (upsellButton !== undefined ? upsellButton : !hideUpsellButton && <TopNavbarUpsell app={app} />)
+                    }
                     {feedbackButton ? <TopNavbarListItem noShrink>{feedbackButton}</TopNavbarListItem> : null}
                     {settingsButton ? (
                         <TopNavbarListItem noShrink className="hidden md:flex">

diff --git a/packages/components/containers/api/ApiProvider.tsx b/packages/components/containers/api/ApiProvider.tsx
index 75ab18a25e..f52c461a80 100644
--- a/packages/components/containers/api/ApiProvider.tsx
+++ b/packages/components/containers/api/ApiProvider.tsx
@@ -111,7 +111,9 @@ const ApiProvider = ({ api, children }: { api: ApiWithListener; children: ReactN
                             error.cancel = true;
                             reject(error);
                         }}
-                    />
+                    />,
+                    // trying to force single instance, see https://github.com/vladimiry/ElectronMail/issues/621#issuecomment-1627389416
+                    "HumanVerificationModal_ID",
                 );
             }

diff --git a/packages/components/containers/app/StandaloneApp.tsx b/packages/components/containers/app/StandaloneApp.tsx
index a7ef1a26ad..0e89cf1ea8 100644
--- a/packages/components/containers/app/StandaloneApp.tsx
+++ b/packages/components/containers/app/StandaloneApp.tsx
@@ -12,7 +12,7 @@ import '@proton/styles/scss/_proton-account.scss';

 import StandalonePublicApp from './StandalonePublicApp';

-const config = { APP_NAME: APPS.PROTONACCOUNT, APP_VERSION: '5.0.999.999', API_URL: '/api' } as ProtonConfig;
+const config = { APP_NAME: APPS.PROTONACCOUNT, APP_VERSION: '5.0.999.999', API_URL: '___ELECTRON_MAIL_PROTON_API_ENTRY_URL_PLACEHOLDER___' } as ProtonConfig;
 const api = createApi({ config });
 const authentication = createAuthentication();

diff --git a/packages/components/containers/login/MinimalLoginContainer.tsx b/packages/components/containers/login/MinimalLoginContainer.tsx
index 07f4d21ead..4f7c23f908 100644
--- a/packages/components/containers/login/MinimalLoginContainer.tsx
+++ b/packages/components/containers/login/MinimalLoginContainer.tsx
@@ -190,7 +190,7 @@ const LoginForm = ({
                 </div>
             )}
             <form
-                name="loginForm"
+                name="loginForm" // tracking this
                 className={challengeLoading ? 'hidden' : undefined}
                 onSubmit={(event) => {
                     event.preventDefault();
@@ -222,7 +222,8 @@ const LoginForm = ({
                     />
                 )}
                 <InputFieldTwo
-                    id="username"
+                    id="username" // tracking this
+                    readonly
                     bigger
                     label={c('Label').t`Email or username`}
                     error={validator([requiredValidator(username)])}

diff --git a/packages/components/hooks/useLoad.ts b/packages/components/hooks/useLoad.ts
index c72145327e..bd29c31242 100644
--- a/packages/components/hooks/useLoad.ts
+++ b/packages/components/hooks/useLoad.ts
@@ -1,13 +1,3 @@
-import { useEffect } from 'react';
-
-import { formatURLForAjaxRequest } from '@proton/shared/lib/helpers/url';
-import noop from '@proton/utils/noop';
-
-const useLoad = (urlParameters?: Record<string, string>) => {
-    useEffect(() => {
-        const url = formatURLForAjaxRequest(window.location.href, urlParameters);
-        fetch(url).catch(noop);
-    }, []);
-};
+const useLoad = () => {}; // wipping "noop" request

 export default useLoad;

diff --git a/applications/mail/src/app/hooks/drawer/useMailDrawer.tsx b/applications/mail/src/app/hooks/drawer/useMailDrawer.tsx
index faab0dff80..271a8f86c4 100644
--- a/applications/mail/src/app/hooks/drawer/useMailDrawer.tsx
+++ b/applications/mail/src/app/hooks/drawer/useMailDrawer.tsx
@@ -9,14 +9,13 @@ import { APPS } from '@proton/shared/lib/constants';
 import { isAppInView } from '@proton/shared/lib/drawer/helpers';
 import { DRAWER_NATIVE_APPS } from '@proton/shared/lib/drawer/interfaces';
 import { isElectronApp } from '@proton/shared/lib/helpers/desktop';
-import { useFlag } from '@proton/unleash';
 import isTruthy from '@proton/utils/isTruthy';

 const useMailDrawer = () => {
     const { appInView, showDrawerSidebar } = useDrawer();

     // TODO: add UserSettings."WalletAccess" condition once available
-    const canShowWalletRightSidebarLink = useFlag('WalletRightSidebarLink');
+    const canShowWalletRightSidebarLink = false;

     const drawerSidebarButtons = [
         <ContactDrawerAppButton aria-expanded={isAppInView(DRAWER_NATIVE_APPS.CONTACTS, appInView)} />,

diff --git a/packages/components/containers/app/AppsDropdown.tsx b/packages/components/containers/app/AppsDropdown.tsx
index e38f8f6dd5..00c29acae7 100644
--- a/packages/components/containers/app/AppsDropdown.tsx
+++ b/packages/components/containers/app/AppsDropdown.tsx
@@ -74,8 +74,7 @@ const AppsDropdown = forwardRef<HTMLButtonElement, AppsDropdownProps>(
                                         className="text-center text-no-decoration outline-none--at-all apps-dropdown-link flex flex-column items-center"
                                         current={current}
                                         reloadDocument={reloadDocument}
-                                        // The same app opens in the same window, other apps in new windows
-                                        target={APP_NAME === appToLinkTo ? '_self' : '_blank'}
+                                        target='_self'
                                     >
                                         <div
                                             className="apps-dropdown-logo-wrapper flex items-center justify-center rounded-lg border border-weak w-custom h-custom mx-auto"

diff --git a/packages/shared/lib/apps/apps.ts b/packages/shared/lib/apps/apps.ts
index 26ab6c0e7c..9347a83643 100644
--- a/packages/shared/lib/apps/apps.ts
+++ b/packages/shared/lib/apps/apps.ts
@@ -1,5 +1,5 @@
 import type { APP_NAMES } from '../constants';
-import { APPS } from '../constants';
+import { APPS, ELECTRON_MAIL_APPS } from '../constants';
 import { isElectronApp } from '../helpers/desktop';
 import type { User } from '../interfaces';
 import { getIsPublicUserWithoutProtonAddress, getIsSSOVPNOnlyAccount } from '../keys';
@@ -35,5 +35,5 @@ export const getAvailableApps = (options: { canAccessWallet: boolean; user?: Use
         apps.push(APPS.PROTONWALLET);
     }

-    return apps;
+    return apps.filter((value) => ELECTRON_MAIL_APPS.includes(value as typeof ELECTRON_MAIL_APPS[number]));
 };

diff --git a/applications/drive/src/app/store/_documents/useDriveDocsFeatureFlag.ts b/applications/drive/src/app/store/_documents/useDriveDocsFeatureFlag.ts
index 393e079efc..e94be6777d 100644
--- a/applications/drive/src/app/store/_documents/useDriveDocsFeatureFlag.ts
+++ b/applications/drive/src/app/store/_documents/useDriveDocsFeatureFlag.ts
@@ -1,50 +1,9 @@
-import { useFlag } from '@proton/unleash';
-
-import { useDirectSharingInfo } from '../_shares/useDirectSharingInfo';
-import { useAbortSignal } from '../_views/utils';
-
 /**
  * Contains logic relating to the availability of Proton Docs.
  */
 export const useDriveDocsFeatureFlag = () => {
-    const defaultSignal = useAbortSignal([]);
-    const { isSharedWithMe } = useDirectSharingInfo();
-
-    const disabled = useFlag('DriveDocsDisabled');
-    const active = useFlag('DriveDocs');
-
-    const isDocsEnabled = !disabled && active;
-
-    const canUseDocs = async (shareId: string, abortSignal: AbortSignal = defaultSignal): Promise<boolean> => {
-        if (disabled) {
-            return false;
-        }
-
-        try {
-            const isShared = await isSharedWithMe(abortSignal, shareId);
-
-            return active || isShared;
-        } catch {
-            // Fallback to the flag value if we cannot fetch the shared status
-            return isDocsEnabled;
-        }
-    };
-
     return {
-        /**
-         * Context-agnostic feature flag for displaying UI related to Docs.
-         */
-        isDocsEnabled,
-        /**
-         * Context aware function returning Proton Docs availability.
-         *
-         * Kill-switch will **ALWAYS** disable the feature.
-         *
-         * However, we allow using the feature if the document is not owned by the user.
-         *
-         * This allows users without the feature flag to still open Docs, even if
-         * they themselves aren't part of the rollout yet.
-         */
-        canUseDocs,
+        isDocsEnabled: false,
+        canUseDocs: async () => false,
     };
 };

