diff --git a/applications/mail/package.json b/applications/mail/package.json
index 484bddd761..cbe893e90c 100644
--- a/applications/mail/package.json
+++ b/applications/mail/package.json
@@ -6,7 +6,6 @@
     "author": "",
     "main": "index.js",
     "scripts": {
-        "build:web": "cross-env NODE_ENV=production WEBPACK_PARALLELISM=2 TS_NODE_PROJECT=\"../../tsconfig.webpack.json\" proton-pack build --appMode=sso",
         "check-types": "tsc",
         "i18n:extract:web": "proton-i18n extract",
         "i18n:getlatest": "proton-i18n upgrade",

diff --git a/applications/mail/webpack.config.ts b/applications/mail/webpack.config.ts
index 72f0b86274..22c087d99c 100644
--- a/applications/mail/webpack.config.ts
+++ b/applications/mail/webpack.config.ts
@@ -5,7 +5,7 @@ import { Configuration, ProvidePlugin } from 'webpack';
 import { InjectManifest } from 'workbox-webpack-plugin';

 import getConfig from '@proton/pack/webpack.config';
-import { addDevEntry, getIndexChunks, getSupportedEntry, mergeEntry } from '@proton/pack/webpack/entries';
+import { addLoginEntry, getIndexChunks } from '@proton/pack/webpack/entries';

 const result = (env: any): Configuration => {
     setAutoFreeze(false);
@@ -41,14 +41,6 @@ const result = (env: any): Configuration => {
         );
         // }

-        // The order is important so that the unsupported file is loaded after
-        config.entry = mergeEntry(config.entry, {
-            eo: [path.resolve('./src/app/eo.tsx'), getSupportedEntry()],
-        });
-
-        // @ts-ignore
-        config.devServer.historyApiFallback.rewrites = [{ from: /^\/eo/, to: '/eo.html' }];
-
         const htmlPlugin = config.plugins.find((plugin): plugin is HtmlWebpackPlugin => {
             return plugin instanceof HtmlWebpackPlugin;
         });
@@ -58,7 +50,7 @@ const result = (env: any): Configuration => {
         const htmlIndex = config.plugins.indexOf(htmlPlugin);

-        if (env.appMode === 'standalone') {
-            addDevEntry(config);
+        if (env.appMode === 'bundle') { // including login page for the "mail" app
+            addLoginEntry(config);
         }

         // We keep the order because the other plugins have an impact
@@ -75,19 +67,6 @@ const result = (env: any): Configuration => {
                 inject: 'body',
             })
         );
-        // Add another webpack plugin on top
-        config.plugins.splice(
-            htmlIndex,
-            0,
-            new HtmlWebpackPlugin({
-                filename: 'eo.html',
-                template: path.resolve('./src/eo.ejs'),
-                templateParameters: htmlPlugin.userOptions.templateParameters,
-                scriptLoading: 'defer',
-                chunks: getIndexChunks('eo'),
-                inject: 'body',
-            })
-        );

         config.experiments = { asyncWebAssembly: true };
     });

diff --git a/packages/shared/lib/api/auth.ts b/packages/shared/lib/api/auth.ts
index efbf28b89f..432f24b303 100644
--- a/packages/shared/lib/api/auth.ts
+++ b/packages/shared/lib/api/auth.ts
@@ -17,7 +17,7 @@ export const auth = (
     persistent: boolean
 ) => ({
     method: 'post',
-    url: 'core/v4/auth',
+    url: 'core/v4/auth', // url used by "patchAuthRequestHeaders" in src/electron-main/util/proton-url.ts
     data: {
         ...data,
         PersistentCookies: Number(persistent),

diff --git a/packages/shared/lib/api/events.ts b/packages/shared/lib/api/events.ts
index 9bf8da627c..476f8f581e 100644
--- a/packages/shared/lib/api/events.ts
+++ b/packages/shared/lib/api/events.ts
@@ -4,7 +4,11 @@ export const getLatestID = () => ({
 });

 export const getEvents = (eventID: string, params?: { ConversationCounts: 1 | 0; MessageCounts: 1 | 0 }) => ({
-    url: `core/v5/events/${eventID}`,
+    url: `core/v5/events/${eventID}`, // url used by "buildEventsApiUrlTester" in src/electron-preload/webview/primary/provider-api/index.ts
     method: 'get',
-    params,
+    params: {
+        ...params,
+        ConversationCounts: 1,
+        MessageCounts: 1,
+    },
 });

diff --git a/packages/shared/lib/api/messages.ts b/packages/shared/lib/api/messages.ts
index aef6b86137..0593fd7ea1 100644
--- a/packages/shared/lib/api/messages.ts
+++ b/packages/shared/lib/api/messages.ts
@@ -42,7 +42,7 @@ export const queryMessageMetadata = ({
     AnchorID,
 }: MailboxItemsQueryParams) => ({
     method: 'get',
-    url: 'mail/v4/messages',
+    url: 'mail/v4/messages', // url used by "patchMailApiRequestHeaders" in src/electron-main/util/proton-url.ts
     params: {
         Location,
         Page,
@@ -72,7 +72,7 @@ export const queryMessageMetadata = ({

 export const queryMessageCount = (AddressID?: string) => ({
     method: 'get',
-    url: 'mail/v4/messages/count',
+    url: 'mail/v4/messages/count', // url used by "buildMessagesCountApiUrlTester" in src/electron-preload/webview/primary/provider-api/index.ts
     params: { AddressID },
 });

diff --git a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
index 5be6a93078..aa37ede95c 100644
--- a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
+++ b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
@@ -486,6 +486,7 @@ const MailboxContainer = ({
                 tabIndex={-1}
                 className="flex-1 flex flex-column flex-nowrap outline-none"
                 data-testid="mailbox"
+                electron-mail-mailbox-container-component
             >
                 <MailHeader
                     breakpoints={breakpoints}

diff --git a/applications/mail/src/app/helpers/attachment/attachmentLoader.ts b/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
index ed1a65d71f..f324ebf164 100644
--- a/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
+++ b/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
@@ -49,6 +49,7 @@ export const getRequest = ({ ID = '' }: Attachment = {}, api: Api, messageKeys:
     return api(getAttachment(ID));
 };

+/* <electron-mail-mark> 1) track signature/args 2) track "verification" props use ("verifyingKeys" prop only at the moment) */
 export const getDecryptedAttachment = async (
     attachment: Attachment,
     verification: MessageVerification | undefined,
@@ -66,10 +67,10 @@ export const getDecryptedAttachment = async (
                 encryptedBinary,
                 sessionKey,
                 attachment.Signature,
-                verification?.verifyingKeys
+                verification?.verifyingKeys // track that only "verifyingKeys" prop is used from "verification"
             );

-            const verified = getVerificationStatusFromKeys(decryptedAttachment, verification?.verifyingKeys || []);
+            const verified = getVerificationStatusFromKeys(decryptedAttachment, verification?.verifyingKeys || []);  // track that only "verifyingKeys" prop is used from "verification"

             return {
                 ...decryptedAttachment,
@@ -96,6 +97,7 @@ export const getDecryptedAttachment = async (
         throw newError;
     }
 };
+/* </electron-mail-mark> */

 export const getAndVerify = async (
     attachment: Attachment = {},

diff --git a/applications/mail/src/app/hooks/contact/useContacts.ts b/applications/mail/src/app/hooks/contact/useContacts.ts
index 18737e3e35..7f542185b7 100644
--- a/applications/mail/src/app/hooks/contact/useContacts.ts
+++ b/applications/mail/src/app/hooks/contact/useContacts.ts
@@ -8,9 +8,11 @@ import {
     recipientsLabelCache,
 } from '../../store/contacts/contactsSelectors';

+/* <electron-mail-mark> */
 export const useContactsMap = () => {
     return useMailSelector(contactsMap);
 };
+/* </electron-mail-mark> */

 export const useContactGroupsMap = () => {
     return useMailSelector(contactGroupsMap);

diff --git a/applications/mail/src/app/store/messages/messagesTypes.ts b/applications/mail/src/app/store/messages/messagesTypes.ts
index 328d40aeac..24bf9b7de0 100644
--- a/applications/mail/src/app/store/messages/messagesTypes.ts
+++ b/applications/mail/src/app/store/messages/messagesTypes.ts
@@ -95,10 +95,12 @@ export interface MessageVerification {
      */
     apiKeysErrors: string[] | undefined;

+    /* <electron-mail-mark> */
     /**
      * Verifying keys, if any
      */
-    verifyingKeys: PublicKeyReference[] | undefined;
+    verifyingKeys: PublicKeyReference[] | undefined; // tracking used prop
+    /* </electron-mail-mark> */
 }

 export interface AbstractMessageImage {

diff --git a/packages/components/hooks/useGetVerificationPreferences.ts b/packages/components/hooks/useGetVerificationPreferences.ts
index 8698fb0667..dc8a639795 100644
--- a/packages/components/hooks/useGetVerificationPreferences.ts
+++ b/packages/components/hooks/useGetVerificationPreferences.ts
@@ -38,6 +38,7 @@ const useGetVerificationPreferences = () => {
     const getPublicKeysForInbox = useGetPublicKeysForInbox();
     const getMailSettings = useGetMailSettings();

+    /* <electron-mail-mark> 1) track signature/args: email, lifetime, contactEmailsMap 2) "verifyingKeys" gets returned */
     const getVerificationPreferences = useCallback<GetVerificationPreferences>(
         async ({ email, lifetime, contactEmailsMap }) => {
             const addresses = await getAddresses();
@@ -70,7 +71,7 @@ const useGetVerificationPreferences = () => {
                 const verifyingKeys = getVerifyingKeys(activePublicKeys, compromisedFingerprints);
                 return {
                     isOwnAddress: true,
-                    verifyingKeys,
+                    verifyingKeys, // "verifyingKeys" gets returned
                     apiKeys: activePublicKeys,
                     pinnedKeys: [],
                     compromisedFingerprints,
@@ -114,7 +115,7 @@ const useGetVerificationPreferences = () => {
             }
             return {
                 isOwnAddress: false,
-                verifyingKeys,
+                verifyingKeys, // "verifyingKeys" gets returned
                 pinnedKeys,
                 apiKeys: apiPublicKeys,
                 ktVerificationResult,
@@ -126,6 +127,7 @@ const useGetVerificationPreferences = () => {
         },
         [api, getAddressKeys, getAddresses, getPublicKeysForInbox, getMailSettings]
     );
+    /* <electron-mail-mark/> */

     return useCallback<GetVerificationPreferences>(
         ({ email, lifetime = DEFAULT_LIFETIME, contactEmailsMap }) => {

diff --git a/applications/mail/src/app/helpers/message/messageDecrypt.ts b/applications/mail/src/app/helpers/message/messageDecrypt.ts
index 3c994a7fa3..87803c24fa 100644
--- a/applications/mail/src/app/helpers/message/messageDecrypt.ts
+++ b/applications/mail/src/app/helpers/message/messageDecrypt.ts
@@ -25,6 +25,7 @@ const binaryToString = (data: Uint8Array) =>
         // nbsp can be contained in message body and "crash" DOMPurify
         .replace(/\u00A0/g, ' ');

+/* <electron-mail-mark> */
 export interface DecryptMessageResult {
     decryptedBody: string;
     decryptedRawContent: Uint8Array;
@@ -34,6 +35,7 @@ export interface DecryptMessageResult {
     errors?: MessageErrors;
     mimetype?: MIME_TYPES;
 }
+/* </electron-mail-mark> */

 const decryptMimeMessage = async (
     message: Message,
@@ -92,6 +94,7 @@ const decryptMimeMessage = async (
  * Willingly not dealing with public keys and signature verification
  * It will be done separately when public keys will be ready
  */
+/* <electron-mail-mark> */
 export const decryptMessage = async (
     message: Message,
     privateKeys: PrivateKeyReference[],
@@ -132,6 +135,7 @@ export const decryptMessage = async (
         };
     }
 };
+/* </electron-mail-mark> */

 /**
  * Verify the extracted `signature` of a decryption result against its `decryptedRawContent`

diff --git a/applications/mail/src/app/hooks/message/useGetMessageKeys.ts b/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
index 4c16c85b5..8b93c6084 100644
--- a/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
+++ b/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
@@ -10,7 +10,7 @@ export type UseGetMessageKeys = () => GetMessageKeys;
 /**
  * Add user public and private keys to the MessageExtended if not already there
  */
-export const useGetMessageKeys: UseGetMessageKeys = () => {
+export const useGetMessageKeys: UseGetMessageKeys = () => { /* <electron-mail-mark> */
     const getAddressKeys = useGetAddressKeys();

     return useCallback(
@@ -20,4 +20,4 @@ export const useGetMessageKeys: UseGetMessageKeys = () => {
         },
         [getAddressKeys]
     );
-};
+}; /* </electron-mail-mark> */

diff --git a/packages/components/hooks/useApi.ts b/packages/components/hooks/useApi.ts
index e2baface5..8b4317d5a 100644
--- a/packages/components/hooks/useApi.ts
+++ b/packages/components/hooks/useApi.ts
@@ -3,8 +3,8 @@ import { Api } from '@proton/shared/lib/interfaces';

 import ContextApi from '../containers/api/apiContext';

-const useApi = (): Api => {
+const useApi = (): Api => { /* <electron-mail-mark> */
     return useContext(ContextApi);
-};
+}; /* </electron-mail-mark> */

 export default useApi;

diff --git a/packages/components/hooks/useAuthentication.ts b/packages/components/hooks/useAuthentication.ts
index 62cc8ee6bf..533ea5d5a1 100644
--- a/packages/components/hooks/useAuthentication.ts
+++ b/packages/components/hooks/useAuthentication.ts
@@ -3,9 +3,9 @@ import { useContext } from 'react';
 import type { PrivateAuthenticationStore } from '../containers/app/interface';
 import AuthenticationContext from '../containers/authentication/authenticationContext';

-const useAuthentication = () => {
+const useAuthentication = () => { /* <electron-mail-mark> */
     // Force private authentication store because the public app is a special case
     return useContext(AuthenticationContext) as PrivateAuthenticationStore;
-};
+}; /* </electron-mail-mark> */

 export default useAuthentication;

diff --git a/packages/components/components/editor/rooster/hooks/useInitRooster.ts b/packages/components/components/editor/rooster/hooks/useInitRooster.ts
index f092dd0201..f42ecbc0b4 100644
--- a/packages/components/components/editor/rooster/hooks/useInitRooster.ts
+++ b/packages/components/components/editor/rooster/hooks/useInitRooster.ts
@@ -56,7 +56,9 @@ const useInitRooster = ({

     const initRooster = useCallback(async () => {
         const iframe = iframeRef.current as HTMLIFrameElement;
+        /* <electron-mail-mark> */
         const iframeDocument = iframe.contentWindow?.document as Document;
+        /* </electron-mail-mark> */

         /**
          * Disable Dark Reader on the composer iframe to avoid sending censored emails
@@ -125,6 +127,13 @@ const useInitRooster = ({

         onReady(actions);

+        window.dispatchEvent(
+            new CustomEvent(
+                'electron-mail:packages/components/components/editor/rooster/hooks/useInitRooster.ts:useInitRooster:onReady',
+                { detail: { iframeDocument } },
+            ),
+        );
+
         return editor;
     }, []);

diff --git a/packages/components/hooks/useCache.ts b/packages/components/hooks/useCache.ts
index 35d7a0aba..352f1c8a3 100644
--- a/packages/components/hooks/useCache.ts
+++ b/packages/components/hooks/useCache.ts
@@ -3,7 +3,7 @@ import { useContext } from 'react';

 import Context from '../containers/cache/cacheContext';

-const useCache = <K = string, V = any>() => {
+const useCache = <K = string, V = any>() => { /* <electron-mail-mark> */
     const cache = useContext(Context);

     if (!cache) {
@@ -11,6 +11,6 @@ const useCache = <K = string, V = any>() => {
     }

     return cache as Cache<K, V>;
-};
+}; /* </electron-mail-mark> */

 export default useCache;

diff --git a/applications/mail/src/app/helpers/url.ts b/applications/mail/src/app/helpers/url.ts
index 2aaa779d3..487f54ff3 100644
--- a/applications/mail/src/app/helpers/url.ts
+++ b/applications/mail/src/app/helpers/url.ts
@@ -91,16 +91,5 @@ export const mailtoParser = (mailto: string): PartialMessageState => {
 };

 export const registerMailToProtocolHandler = () => {
-    if ('registerProtocolHandler' in navigator) {
-        try {
-            navigator.registerProtocolHandler(
-                'mailto',
-                `${window.location.origin}${MAILTO_PROTOCOL_HANDLER_PATH}`,
-                // @ts-expect-error third arg is still recommended (cf. https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler)
-                'ProtonMail'
-            );
-        } catch (e: any) {
-            console.error(e);
-        }
-    }
+    // NOOP
 };

diff --git a/applications/mail/src/app/components/drawer/MailQuickSettings.tsx b/applications/mail/src/app/components/drawer/MailQuickSettings.tsx
index c7fa985bb1..c7b33cf2f9 100644
--- a/applications/mail/src/app/components/drawer/MailQuickSettings.tsx
+++ b/applications/mail/src/app/components/drawer/MailQuickSettings.tsx
@@ -40,7 +40,6 @@ import { useGetStartedChecklist } from 'proton-mail/containers/onboardingCheckli
 import useMailModel from 'proton-mail/hooks/useMailModel';

 import ClearBrowserDataModal from '../header/ClearBrowserDataModal';
-import MailDefaultHandlerModal from '../header/MailDefaultHandlerModal';

 const { OFF, UNSET, SERVER_ONLY } = AI_ASSISTANT_ACCESS;

@@ -378,7 +377,6 @@ const MailQuickSettings = () => {
                 </Tooltip>
             </QuickSettingsButtonSection>

-            <MailDefaultHandlerModal {...mailDefaultHandlerProps} />
             <ClearBrowserDataModal {...clearBrowserDataProps} />
             <MailShortcutsModal {...mailShortcutsProps} />
             <KeyTransparencyDetailsModal {...keyTransparencyDetailsModalProps} />

diff --git a/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx b/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx
deleted file mode 100644
index 0314390d7b..0000000000
--- a/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx
+++ /dev/null
@@ -1,42 +0,0 @@
-import { c } from 'ttag';
-
-import { Button, Href } from '@proton/atoms';
-import type { ModalProps } from '@proton/components';
-import { Prompt } from '@proton/components';
-import { MAIL_APP_NAME } from '@proton/shared/lib/constants';
-import { getKnowledgeBaseUrl } from '@proton/shared/lib/helpers/url';
-
-import { registerMailToProtocolHandler } from '../../helpers/url';
-
-const MailDefaultHandlerModal = (props: ModalProps) => {
-    const { onClose } = props;
-
-    const handleAskForPermission = () => {
-        registerMailToProtocolHandler();
-
-        onClose?.();
-    };
-
-    return (
-        <Prompt
-            title={c('Info').t`Default email application`}
-            buttons={[
-                <Button color="norm" onClick={handleAskForPermission}>{c('Action').t`Set as default`}</Button>,
-                <Button onClick={onClose}>{c('Action').t`Cancel`}</Button>,
-            ]}
-            {...props}
-        >
-            <span>{c('Info')
-                .t`Set ${MAIL_APP_NAME} as your default email application for this browser. ${MAIL_APP_NAME} will open automatically when you click an email link.`}</span>
-            <Href
-                className="ml-2"
-                href={getKnowledgeBaseUrl('/set-default-email-handler')}
-                title="Default mail handler"
-            >
-                {c('Info').t`Learn more`}
-            </Href>
-        </Prompt>
-    );
-};
-
-export default MailDefaultHandlerModal;

diff --git a/applications/mail/src/app/components/header/search/MailSearch.tsx b/applications/mail/src/app/components/header/search/MailSearch.tsx
index c980e13679..a079cbd7b9 100644
--- a/applications/mail/src/app/components/header/search/MailSearch.tsx
+++ b/applications/mail/src/app/components/header/search/MailSearch.tsx
@@ -4,21 +4,17 @@ import type { Location } from 'history';

 import type { Breakpoints } from '@proton/components';
 import {
-    FeatureCode,
     TopNavbarListItemSearchButton,
     generateUID,
     useAddresses,
     useFolders,
     useLabels,
     usePopperAnchor,
-    useProgressiveRollout,
     useToggle,
-    useUser,
 } from '@proton/components';

 import { ADVANCED_SEARCH_OVERLAY_CLOSE_EVENT } from '../../../constants';
 import { useEncryptedSearchContext } from '../../../containers/EncryptedSearchProvider';
-import { isEncryptedSearchAvailable } from '../../../helpers/encryptedSearch/esUtils';
 import { extractSearchParameters } from '../../../helpers/mailboxUrl';
 import { useClickMailContent } from '../../../hooks/useClickMailContent';
 import AdvancedSearch from './AdvancedSearch';
@@ -36,17 +32,15 @@ interface Props {

 const MailSearch = ({ breakpoints, labelID, location, columnMode }: Props) => {
     const [uid] = useState(generateUID('advanced-search-overlay'));
-    const isESUserInterfaceAvailable = useProgressiveRollout(FeatureCode.ESUserInterface);
     const { anchorRef, isOpen, open, close } = usePopperAnchor<HTMLInputElement>();
     const searchParams = extractSearchParameters(location);
     const [searchInputValue, setSearchInputValue] = useState(searchParams.keyword || '');
-    const [user] = useUser();
     const [, loadingLabels] = useLabels();
     const [, loadingFolders] = useFolders();
     const [, loadingAddresses] = useAddresses();
     const { esStatus, cacheIndexedDB, closeDropdown, esIndexingProgressState } = useEncryptedSearchContext();
     const { dropdownOpened } = esStatus;
-    const showEncryptedSearch = isEncryptedSearchAvailable(user, isESUserInterfaceAvailable);
+    const showEncryptedSearch = false;
     // Show more from inside AdvancedSearch to persist the state when the overlay is closed
     const { state: showMore, toggle: toggleShowMore } = useToggle(false);

diff --git a/packages/encrypted-search/lib/constants.ts b/packages/encrypted-search/lib/constants.ts
index ebdf5ee22..28adf6c62 100644
--- a/packages/encrypted-search/lib/constants.ts
+++ b/packages/encrypted-search/lib/constants.ts
@@ -131,7 +131,7 @@ export const defaultESStatus = {
     isEnablingContentSearch: false,
     isDBLimited: false,
     esEnabled: false,
-    esSupported: true,
+    esSupported: false,
     isRefreshing: false,
     isSearchPartial: false,
     isSearching: false,

diff --git a/applications/mail/src/app/hooks/useMailModel.ts b/applications/mail/src/app/hooks/useMailModel.ts
index 92034469a9..a49c3d54bb 100644
--- a/applications/mail/src/app/hooks/useMailModel.ts
+++ b/applications/mail/src/app/hooks/useMailModel.ts
@@ -1,6 +1,6 @@
 import { useMailSettings } from '@proton/components/hooks';

-type MailModel = 'MailSettings';
+type MailModel = 'MailSettings'; // tracking "MailSettings" constant

 const useMailModel = (key: MailModel) => {
     const [mailSettings] = useMailSettings();

diff --git a/packages/shared/lib/interfaces/MailSettings.ts b/packages/shared/lib/interfaces/MailSettings.ts
index d7d70c1d0c..565a2601aa 100644
--- a/packages/shared/lib/interfaces/MailSettings.ts
+++ b/packages/shared/lib/interfaces/MailSettings.ts
@@ -50,7 +50,7 @@ export interface MailSettings {
     ComposerMode: COMPOSER_MODE;
     MessageButtons: MESSAGE_BUTTONS;
     ShowMoved: number;
-    ViewMode: VIEW_MODE;
+    ViewMode: VIEW_MODE; // track "ViewMode" prop
     ViewLayout: VIEW_LAYOUT;
     SwipeLeft: SWIPE_ACTION; // default 3
     SwipeRight: SWIPE_ACTION; // default 0
