diff --git a/applications/drive/package.json b/applications/drive/package.json
index f082f72e36..63c181b0d9 100644
--- a/applications/drive/package.json
+++ b/applications/drive/package.json
@@ -7,7 +7,6 @@
     "main": "index.ts",
     "scripts": {
         "analyze": "yarn build:web --analyze",
-        "build:web": "cross-env NODE_ENV=production TS_NODE_PROJECT=\"../../tsconfig.webpack.json\" proton-pack build --appMode=sso",
         "check-types": "tsc",
         "i18n:extract:local": "yarn workspace @proton/i18n build && yarn build:web && proton-i18n extract",
         "i18n:extract:web": "proton-i18n extract",

diff --git a/applications/drive/webpack.config.ts b/applications/drive/webpack.config.ts
index afccc2a4b1..8682856d3a 100644
--- a/applications/drive/webpack.config.ts
+++ b/applications/drive/webpack.config.ts
@@ -2,7 +2,7 @@ import HtmlWebpackPlugin from 'html-webpack-plugin';
 import webpack from 'webpack';

 import getConfig from '@proton/pack/webpack.config';
-import { addDevEntry, getIndexChunks } from '@proton/pack/webpack/entries';
+import { addLoginEntry, getIndexChunks } from '@proton/pack/webpack/entries';

 /**
  * There are some specific references to Buffer in the drive application,
@@ -47,8 +47,8 @@ const result = (env: any): webpack.Configuration => {
         })
     );

-    if (env.appMode === 'standalone') {
-        addDevEntry(config);
+    if (env.appMode === 'standalone') { // keeping original condition, so login page only included for the "mail" app
+        addLoginEntry(config);
     }

     return {

diff --git a/applications/drive/src/.htaccess b/applications/drive/src/.htaccess
index b0b25a5fae..11d4e4af0f 100644
--- a/applications/drive/src/.htaccess
+++ b/applications/drive/src/.htaccess
@@ -40,10 +40,12 @@ ErrorDocument 404 /assets/404.html
 </Files>

 # The download service worker gets chunk hash appended to the end of the filename
+# <electron-mail-mark>
 <Files ~ "^downloadSW">
   Header set Service-Worker-Allowed "/"
   Header set Service-Worker "script"
 </Files>
+# </electron-mail-mark>

 <IfModule mod_deflate.c>
   AddOutputFilter INCLUDES;DEFLATE svg

diff --git a/applications/drive/src/app/store/_downloads/fileSaver/download.ts b/applications/drive/src/app/store/_downloads/fileSaver/download.ts
index 7483da5f4f..62d7bb7733 100644
--- a/applications/drive/src/app/store/_downloads/fileSaver/download.ts
+++ b/applications/drive/src/app/store/_downloads/fileSaver/download.ts
@@ -13,8 +13,7 @@ import { TransferMeta } from '../../../components/TransferManager/transfer';
  * IOS - forces all browsers to use webkit, so same problems as safari in all browsers.
  * For them download is done in-memory using blob response.
  */
-export const isUnsupported = () =>
-    !('serviceWorker' in navigator) || isSafari() || (isEdge() && !isEdgeChromium()) || isIos();
+export const isUnsupported = () => !('serviceWorker' in navigator);

 // createDownloadIframe opens download URL created in service worker to
 // initialize the download in the browser. The response has headers to
@@ -56,21 +55,28 @@ function serviceWorkerKeepAlive() {
     }, 10000);
 }

+/* <electron-mail-mark> */
 export async function initDownloadSW() {
     if (isUnsupported()) {
         throw new Error('Saving file via download is unsupported by this browser');
     }

-    await navigator.serviceWorker.register(
-        /* webpackChunkName: "downloadSW" */
-        new URL('./downloadSW', import.meta.url),
-        {
-            scope: `/${stripLeadingAndTrailingSlash(PUBLIC_PATH)}`,
-        }
-    );
+    try {
+        await navigator.serviceWorker.register(
+            /* webpackChunkName: "downloadSW" */
+            new URL('./downloadSW', import.meta.url),
+            {
+                scope: `/${stripLeadingAndTrailingSlash(PUBLIC_PATH)}`,
+            }
+        );
+    } catch (e) {
+        console.error(`Failed to register service worker.`, e.message);
+        throw e;
+    }

     serviceWorkerKeepAlive();
 }
+/* </electron-mail-mark> */

 /**
  * Opens download stream into service worker. Use abort signal when pipeTo can't close the download stream.

diff --git a/applications/drive/src/app/store/_shares/shareUrl.ts b/applications/drive/src/app/store/_shares/shareUrl.ts
index 1b76b8ea81..748ede869b 100644
--- a/applications/drive/src/app/store/_shares/shareUrl.ts
+++ b/applications/drive/src/app/store/_shares/shareUrl.ts
@@ -43,5 +43,9 @@ export const getSharedLink = (sharedURL?: {
     const url = sharedURL.publicUrl
         ? replaceLocalURL(sharedURL.publicUrl)
         : getAppHref(`/urls/${sharedURL.token}`, APPS.PROTONDRIVE);
-    return `${url}${generatedPassword !== '' ? `#${generatedPassword}` : ''}`;
+    const resultUrl = `${url}${generatedPassword !== '' ? `#${generatedPassword}` : ''}`;
+    return new URL(
+        new URL(resultUrl).href.substring(new URL(resultUrl).origin.length),
+        "https://drive.proton.me",
+    ).toString();
 };
--
