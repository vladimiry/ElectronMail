diff --git a/packages/shared/lib/helpers/sentry.ts b/packages/shared/lib/helpers/sentry.ts
index d56a7bf7a0..7cadf90d72 100644
--- a/packages/shared/lib/helpers/sentry.ts
+++ b/packages/shared/lib/helpers/sentry.ts
@@ -1,21 +1,14 @@
 import type { BrowserOptions } from '@sentry/browser';
 import {
-    Integrations as SentryIntegrations,
     captureException,
-    configureScope,
-    init,
-    makeFetchTransport,
     captureMessage as sentryCaptureMessage,
 } from '@sentry/browser';
-import type { BrowserTransportOptions } from '@sentry/browser/types/transports/types';

 import { Availability, AvailabilityTypes } from '@proton/utils/availability';

 import { VPN_HOSTNAME } from '../constants';
-import { ApiError } from '../fetch/ApiError';
 import { getUIDHeaders } from '../fetch/headers';
 import type { ProtonConfig } from '../interfaces';
-import { isElectronApp } from './desktop';

 type SentryContext = {
     authHeaders: { [key: string]: string };
@@ -72,21 +65,6 @@ export const getContentTypeHeaders = (input: FirstFetchParameter): HeadersInit =
     return {};
 };

-const sentryFetch: typeof fetch = (input, init?) => {
-    return globalThis.fetch(input, {
-        ...init,
-        headers: {
-            ...init?.headers,
-            ...getContentTypeHeaders(input),
-            ...context.authHeaders,
-        },
-    });
-};
-
-const makeProtonFetchTransport = (options: BrowserTransportOptions) => {
-    return makeFetchTransport(options, sentryFetch);
-};
-
 const isLocalhost = (host: string) => host.startsWith('localhost');
 export const isProduction = (host: string) => host.endsWith('.proton.me') || host === VPN_HOSTNAME;

@@ -180,82 +158,7 @@ function main({
     ignore = ({ host }) => isLocalhost(host),
     denyUrls = getDefaultDenyUrls(),
     ignoreErrors = getDefaultIgnoreErrors(),
-}: SentryOptions) {
-    const { SENTRY_DSN, SENTRY_DESKTOP_DSN, APP_VERSION } = config;
-    const sentryDSN = isElectronApp ? SENTRY_DESKTOP_DSN || SENTRY_DSN : SENTRY_DSN;
-    const { host, release, environment } = sentryConfig;
-
-    // No need to configure it if we don't load the DSN
-    if (!sentryDSN || ignore(sentryConfig)) {
-        return;
-    }
-
-    setUID(UID);
-
-    // Assumes sentryDSN is: https://111b3eeaaec34cae8e812df705690a36@sentry/11
-    // To get https://111b3eeaaec34cae8e812df705690a36@protonmail.com/api/core/v4/reports/sentry/11
-    const dsn = sentryDSN.replace('sentry', `${host}/api/core/v4/reports/sentry`);
-
-    init({
-        dsn,
-        release,
-        environment,
-        normalizeDepth: 5,
-        transport: makeProtonFetchTransport,
-        autoSessionTracking: sessionTracking,
-        // do not log calls to console.log, console.error, etc.
-        integrations: [
-            new SentryIntegrations.Breadcrumbs({
-                console: false,
-            }),
-        ],
-        // Disable client reports. Client reports are used by sentry to retry events that failed to send on visibility change.
-        // Unfortunately Sentry does not use the custom transport for those, and thus fails to add the headers the API requires.
-        sendClientReports: false,
-        beforeSend(event, hint) {
-            const error = hint?.originalException as any;
-            const stack = typeof error === 'string' ? error : error?.stack;
-            // Filter out broken ferdi errors
-            if (stack && stack.match(/ferdi|franz/i)) {
-                return null;
-            }
-
-            // Not interested in uncaught API errors, or known errors
-            if (error instanceof ApiError || error?.trace === false) {
-                return null;
-            }
-
-            if (!context.enabled) {
-                return null;
-            }
-
-            // Remove the hash from the request URL and navigation breadcrumbs to avoid
-            // leaking the search parameters of encrypted searches
-            if (event.request && event.request.url) {
-                [event.request.url] = event.request.url.split('#');
-            }
-            if (event.breadcrumbs) {
-                event.breadcrumbs = event.breadcrumbs.map((breadcrumb) => {
-                    if (breadcrumb.category === 'navigation' && breadcrumb.data) {
-                        [breadcrumb.data.from] = breadcrumb.data.from.split('#');
-                        [breadcrumb.data.to] = breadcrumb.data.to.split('#');
-                    }
-                    return breadcrumb;
-                });
-            }
-
-            return event;
-        },
-        // Some ignoreErrors and denyUrls are taken from this gist: https://gist.github.com/Chocksy/e9b2cdd4afc2aadc7989762c4b8b495a
-        // This gist is suggested in the Sentry documentation: https://docs.sentry.io/clients/javascript/tips/#decluttering-sentry
-        ignoreErrors,
-        denyUrls,
-    });
-
-    configureScope((scope) => {
-        scope.setTag('appVersion', APP_VERSION);
-    });
-}
+}: SentryOptions) {}

 export const traceError = (...args: Parameters<typeof captureException>) => {
     if (!isLocalhost(window.location.host)) {
@@ -279,15 +182,7 @@ type CaptureExceptionArgs = Parameters<typeof captureException>;
  * @param initiative
  * @param error
  */
-export const traceInitiativeError = (initiative: MailInitiative, error: CaptureExceptionArgs[0]) => {
-    if (!isLocalhost(window.location.host)) {
-        captureException(error, {
-            tags: {
-                initiative,
-            },
-        });
-    }
-};
+export const traceInitiativeError = (initiative: MailInitiative, error: CaptureExceptionArgs[0]) => console.error(error);

 /**
  * Capture message with an additional initiative tag
@@ -297,12 +192,6 @@ export const traceInitiativeError = (initiative: MailInitiative, error: CaptureE
 export const captureInitiativeMessage: (initiative: SentryInitiative, message: string) => void = (
     initiative,
     message
-) => {
-    captureMessage(message, {
-        tags: {
-            initiative,
-        },
-    });
-};
+) => console.log(message);

 export default main;
